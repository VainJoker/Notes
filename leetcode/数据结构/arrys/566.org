给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。

重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。

如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。

示例 1:

输入: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
输出: 
[[1,2,3,4]]
解释:
行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。
示例 2:

输入: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
输出: 
[[1,2],
 [3,4]]
解释:
没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。
注意：

给定矩阵的宽和高范围在 [1, 100]。
给定的 r 和 c 都是正数。


思路：由二维数组转二维数组较难，先通过一个一维数组进行转化，再通过append将每次生成的一维数组追加到结果之后

#+begin_src go
func matrixReshape(nums [][]int, r int, c int) [][]int {
    if len(nums) * len(nums[0]) == r * c {
        var tmp[] int 
        var res[][] int 
        i := 0
        j := 0
        for i = 0; i < len(nums); i++{
            for j = 0; j < len(nums[i]); j++{
                tmp = append(tmp,nums[i][j])
            }
        }
        for i:=0;i<r;i++{
			var tmp2 []int
			for j:=0+i*c;j<c*(i+1);j++{
				tmp2 = append(tmp2,tmp[j])
			}
			res = append(res,tmp2)
		}
        return res
    }else{
        return nums
    }
}
#+end_src
