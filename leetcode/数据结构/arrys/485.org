给定一个二进制数组， 计算其中最大连续1的个数。

示例 1:

输入: [1,1,0,1,1,1]
输出: 3
解释: 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3.
注意：

输入的数组只包含 0 和1。
输入数组的长度是正整数，且不超过 10,000。

思路：见1增，见0清。记得保存最大值

#+begin_src go
func findMaxConsecutiveOnes(nums []int) int {
    flag := 0
    maxFlag := 0
    for i := 0; i < len(nums); i++{
        if nums[i] == 1 {
            flag++
        }else{
            maxFlag = max(flag,maxFlag)
            flag = 0
        }
        maxFlag = max(flag,maxFlag)
    } 
    return maxFlag
}

func max(x,y int) int {
    if x >= y {
        return x
    }
    return y
}
#+end_src
